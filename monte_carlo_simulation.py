# -*- coding: utf-8 -*-
"""Monte Carlo Simulation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10QNBEBbU4wbS3OJ4iRjJKQnVV9pmlBxA
"""

import numpy as np
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display
import matplotlib.ticker as mtick
from matplotlib.ticker import MultipleLocator

# --- Asset return assumptions (mean return, std deviation) ---
inflation_rate = 0.025  # 2.5%

#(avg growth rate, volitility)
asset_params = {
    "Stocks (%)": (0.08 - inflation_rate, 0.15),
    "Cash (%)": (0.02 - inflation_rate, 0.005),
    "High Quality Bonds (%)": (0.04 - inflation_rate, 0.03),
    "Real Estate (%)": (0.07 - inflation_rate, 0.06),
    "ETFs (%)": (0.07 - inflation_rate, 0.14),
    "Private Equity (%)": (0.11 - inflation_rate, 0.15)
}

# --- Dropdowns for allocations ---
def create_allocation_widget(asset):
    return widgets.Dropdown(
        options=[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
        value=0,
        description=asset,
        style={'description_width': 'initial'}
    )

widgets_dict = {asset: create_allocation_widget(asset) for asset in asset_params}

# --- Starting amount widget ---
start_amount_widget = widgets.IntText(
    value=100000,
    description="Starting Amount ($)",
    style={'description_width': 'initial'}
)

# --- End Goal widget ---
end_goal = widgets.IntText(
    value=400000,
    description= "End Goal ($)",
    style={'description_width': 'initial'}
)

# --- Yearly contribution widget ---
yoy_contribution = widgets.IntText(
    value=10000,
    description="Yearly Contribution ($)",
    style={'description_width': 'initial'}
)

# --- Axis settings ---
fixed_x_min = 0
fixed_x_max = 30
fixed_y_min = 0
#fixed_y_max = 1_000_000  # Fixed max y-axis

def monte_carlo_simulation(**allocations):
    total_alloc = sum(allocations.values())
    if total_alloc != 100:
        print(f"Allocations must sum to 100%. Current sum: {total_alloc}%")
        return

    years = 30
    simulations = 1500
    start_value = start_amount_widget.value
    yearly_contrib = yoy_contribution.value # Get yearly contribution

    # --- Set Y-axis max right away based on starting value and contribution ---
    # Assuming a moderate growth rate and contribution over 30 years
    fixed_y_max = max(start_value * 5, start_value + yearly_contrib * years * 2) # Adjust heuristic as needed

    portfolio_values = np.zeros((simulations, years + 1))
    portfolio_values[:, 0] = start_value

    for sim in range(simulations):
        value = start_value
        for year in range(1, years + 1):
            value += yearly_contrib # Add yearly contribution
            yearly_return = 0
            for asset, pct in allocations.items():
                mean, std = asset_params[asset]
                yearly_return += (pct / 100) * np.random.normal(mean, std)
            value *= (1 + yearly_return)
            portfolio_values[sim, year] = value

    # --- Stats after 30 years ---
    final_values = portfolio_values[:, -1]
    avg_final = np.mean(final_values)
    min_final = np.min(final_values)
    max_final = np.max(final_values)
    prob_gain = np.mean(final_values > end_goal.value) * 100 # Fixed: Use end_goal.value for comparison

    print(f"Starting with ${start_value:,.0f}")
    print(f"Yearly contribution: ${yearly_contrib:,.0f}")
    print(f"End Goal: ${end_goal.value:,.0f}")
    print(f"** All values below, adjusted for inflation **")
    print(f"Average portfolio after {years} years: ${avg_final:,.0f}")
    print(f"Best-case: ${max_final:,.0f}")
    print(f"Worst-case: ${min_final:,.0f}")
    print(f"Chance of hitting your end goal: {prob_gain:.1f}%") # Adjusted output message


    # --- Plot results ---
    plt.figure(figsize=(10, 6))
    plt.plot(portfolio_values.T, color='gray', alpha=0.05)
    plt.plot(np.mean(portfolio_values, axis=0), color='blue', linewidth=2, label='Average')
    plt.axhline(y=end_goal.value, color='yellow', linewidth=2, linestyle='--', label='End Goal')
    plt.xlabel("Years")
    plt.ylabel("Portfolio Value ($)")
    plt.title("Monte Carlo Portfolio Simulation")
    plt.legend()

    # Fixed axes
    plt.xlim(fixed_x_min, fixed_x_max)
    plt.ylim(fixed_y_min, fixed_y_max)

    plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(lambda x, _: f'{int(x):,}'))
    plt.gca().yaxis.set_major_locator(MultipleLocator(fixed_y_max/10))


    plt.show()

# --- Button to run ---
run_button = widgets.Button(description="Run Simulation", button_style='success')

def on_button_click(b):
    allocations = {asset: w.value for asset, w in widgets_dict.items()}
    monte_carlo_simulation(**allocations)

run_button.on_click(on_button_click)

# --- Display widgets ---
ui = widgets.VBox([start_amount_widget, end_goal, yoy_contribution] + list(widgets_dict.values()) + [run_button])
display(ui)